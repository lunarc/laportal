#!/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade HG on Tue May 19 21:48:13 2009

#
# ArcWindow main window class
#
# Copyright (C) 2008-2009 Jonas Lindemann
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

"""
Implements the arcgui main window.
"""

import wx

# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

import sys

#sys.path.append("/sw/pkg/arc-trunk/lib64/python2.4/site-packages")

try:
    import arc
except:
    print "ARC1 Python binding not found. Please check search paths."
    sys.exit(-1)

import os, sys, threading

# ArcGUI imports

from Clients import ArcClient, ManagedJobDescription
from AddOutputFileDialog import AddOutputFileDialog
from ArcSplash import ArcSplash
from ClientSettingsDialog import ClientSettingsDialog
from CertificateInfoWindow import *
from DefaultServicesDialog import DefaultServicesDialog

# New events defined by ARCGUI

EVT_PROGRESS_UPDATE_TYPE = wx.NewEventType()
EVT_PROGRESS_UPDATE = wx.PyEventBinder(EVT_PROGRESS_UPDATE_TYPE, 1)
EVT_LOG_UPDATE_TYPE = wx.NewEventType()
EVT_LOG_UPDATE = wx.PyEventBinder(EVT_LOG_UPDATE_TYPE, 1)
EVT_UPDATE_STATUS_DONE_TYPE = wx.NewEventType()
EVT_UPDATE_STATUS_DONE = wx.PyEventBinder(EVT_UPDATE_STATUS_DONE_TYPE, 1)
EVT_RETRIEVE_JOBS_DONE_TYPE = wx.NewEventType()
EVT_RETRIEVE_JOBS_DONE = wx.PyEventBinder(EVT_RETRIEVE_JOBS_DONE_TYPE, 1)
EVT_CLEAN_JOBS_DONE_TYPE = wx.NewEventType()
EVT_CLEAN_JOBS_DONE = wx.PyEventBinder(EVT_CLEAN_JOBS_DONE_TYPE, 1)
EVT_KILL_JOBS_DONE_TYPE = wx.NewEventType()
EVT_KILL_JOBS_DONE = wx.PyEventBinder(EVT_KILL_JOBS_DONE_TYPE, 1)
EVT_SUBMIT_JOB_DONE_TYPE = wx.NewEventType()
EVT_SUBMIT_JOB_DONE = wx.PyEventBinder(EVT_SUBMIT_JOB_DONE_TYPE, 1)

class UpdateProgressEvent(wx.PyCommandEvent):
    """
    Event sent by worker threads to update progress.
    """
    def __init__(self, etype, eid, info="update"):
        wx.PyCommandEvent.__init__(self, etype, eid)
        self.__info = info
        
    def getInfo(self):
        return self.__info
    
    info = property(getInfo)

class UpdateLogEvent(wx.PyCommandEvent):
    """
    Event sent by worker threads to update log.
    """
    def __init__(self, etype, eid, output="update"):
        wx.PyCommandEvent.__init__(self, etype, eid)
        self.__output = output
        
    def getOutput(self):
        return self.__output
    
    output = property(getOutput)

class UpdateStatusDoneEvent(wx.PyCommandEvent):
    """
    Event sent when the worker thread UpdateStatusThread has finished
    processing.
    """
    def __init__(self, etype, eid):
        wx.PyCommandEvent.__init__(self, etype, eid)

class RetrieveJobsDoneEvent(wx.PyCommandEvent):
    """
    Event sent when the worker thread RetrieveJobsThread has finished
    processing.
    """
    def __init__(self, etype, eid):
        wx.PyCommandEvent.__init__(self, etype, eid)
        
class CleanJobsDoneEvent(wx.PyCommandEvent):
    """
    Event sent when the worker thread CleanJobsThread has finished
    processing.
    """
    def __init__(self, etype, eid):
        wx.PyCommandEvent.__init__(self, etype, eid)
        
class KillJobsDoneEvent(wx.PyCommandEvent):
    """
    Event sent when the worker thread KillJobsThread has finished
    processing.
    """
    def __init__(self, etype, eid):
        wx.PyCommandEvent.__init__(self, etype, eid)
        
class SubmitJobDoneEvent(wx.PyCommandEvent):
    """
    Event sent when the worker thread SubmitJobThread has finished
    processing.
    """
    def __init__(self, etype, eid, success=True):
        wx.PyCommandEvent.__init__(self, etype, eid)
        self.__success = True
        
    def getSuccess(self):
        return self.__success
    
    success = property(getSuccess)
            
class ArcGuiThread(threading.Thread):
    def __init__(self, parent, arcClient):
        threading.Thread.__init__(self)
        self.__parent = parent
        self.__arcClient = arcClient
        self.__arcClient.updateProgress = self.doProgress
        self.__arcClient.logStream = self
        self.__debugLevel = self.__arcClient.debugLevel
        
    def write(self, string):
        evt = UpdateLogEvent(EVT_LOG_UPDATE_TYPE, -1, string)
        wx.PostEvent(self.__parent, evt)

    def doProgress(self, message):
        evt = UpdateProgressEvent(EVT_PROGRESS_UPDATE_TYPE, -1, message)
        wx.PostEvent(self.__parent, evt)

    def getParent(self):
        return self.__parent
    
    def getArcClient(self):
        return self.__arcClient
    
    def setDebugLevel(self, debugLevel):
        self.__debugLevel = debugLevel
        
    def getDebugLevel(self):
        return self.__debugLevel
    
    parent = property(getParent)
    arcClient = property(getArcClient)
    debugLevel = property(getDebugLevel, setDebugLevel)

class UpdateStatusThread(ArcGuiThread):
    """
    Worker thread for updating job status.
    """
    def run(self):
        self.arcClient.updateStatus()
        evt = UpdateStatusDoneEvent(EVT_UPDATE_STATUS_DONE_TYPE, -1)
        wx.PostEvent(self.parent, evt)
        
class RertieveJobsThread(ArcGuiThread):
    """
    Worker thread for retrieving (downloading) jobs.
    """
    def __init__(self, parent, arcClient, jobIds, downloadDir):
        ArcGuiThread.__init__(self, parent, arcClient)
        self.__jobIds = jobIds
        self.__downloadDir = downloadDir
        
    def run(self):
        self.arcClient.downloadDir = self.__downloadDir
        self.arcClient.get(self.__jobIds)
        evt = RetrieveJobsDoneEvent(EVT_RETRIEVE_JOBS_DONE_TYPE, -1)
        wx.PostEvent(self.parent, evt)
                
class CleanJobsThread(ArcGuiThread):
    """
    Worker thread for cleaning jobs.
    """
    def __init__(self, parent, arcClient, jobIds, force=False):
        ArcGuiThread.__init__(self, parent, arcClient)
        self.__jobIds = jobIds
        self.__force = force
        
    def run(self):
        self.arcClient.clean(self.__jobIds, force=self.__force)
        evt = CleanJobsDoneEvent(EVT_CLEAN_JOBS_DONE_TYPE, -1)
        wx.PostEvent(self.parent, evt)
            
class KillJobsThread(ArcGuiThread):
    """
    Worker thread for killing jobs.
    """
    def __init__(self, parent, arcClient, jobIds, force=False):
        ArcGuiThread.__init__(self, parent, arcClient)
        self.__jobIds = jobIds
        self.__force = force
        
    def run(self):
        self.arcClient.kill(self.__jobIds, force=self.__force)
        evt = KillJobsDoneEvent(EVT_KILL_JOBS_DONE_TYPE, -1)
        wx.PostEvent(self.parent, evt)
        
class SubmitJobThread(ArcGuiThread):
    """
    Worker thread for submitting a job.
    """
    def __init__(self, parent, arcClient, job):
        ArcGuiThread.__init__(self, parent, arcClient)
        self.__job = job
        
    def run(self):
        self.arcClient.findTargets()
        self.arcClient.filterTargets(self.__job)   
        success = self.arcClient.submit(self.__job)
        evt = SubmitJobDoneEvent(EVT_SUBMIT_JOB_DONE_TYPE, -1, success)
        wx.PostEvent(self.parent, evt)
        
class ArcWindow(wx.Frame):
    """
    Main frame class for arcgui.
    """
    def __init__(self, *args, **kwds):
        # begin wxGlade: ArcWindow.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER|wx.SP_LIVE_UPDATE)
        self.panel_1 = wx.Panel(self.window_1, -1)
        self.mainPanel = wx.Panel(self.window_1, -1)
        self.noteBook = wx.Notebook(self.mainPanel, -1, style=0)
        self.activeJobsPane = wx.Panel(self.noteBook, -1)
        self.simpleJobPane = wx.Panel(self.noteBook, -1)
        self.genericJobPane = wx.Panel(self.noteBook, -1)
        
        # Menu Bar
        self.mainMenuBar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.fileExitMenu = wx.MenuItem(self.fileMenu, wx.NewId(), "&Quit\tCtrl+Q", "", wx.ITEM_NORMAL)
        self.fileMenu.AppendItem(self.fileExitMenu)
        self.mainMenuBar.Append(self.fileMenu, "&File")
        self.sessionMenu = wx.Menu()
        self.sessionCertProxyInfoMenu = wx.MenuItem(self.sessionMenu, wx.NewId(), "&Cert/Proxy information... \tF2", "", wx.ITEM_NORMAL)
        self.sessionMenu.AppendItem(self.sessionCertProxyInfoMenu)
        self.mainMenuBar.Append(self.sessionMenu, "&Session")
        self.settingsMenu = wx.Menu()
        self.clientSettingsMenu = wx.MenuItem(self.settingsMenu, wx.NewId(), "&Client\tF3", "", wx.ITEM_NORMAL)
        self.settingsMenu.AppendItem(self.clientSettingsMenu)
        self.servicesSettingsMenu = wx.MenuItem(self.settingsMenu, wx.NewId(), "&Services...\tF4", "", wx.ITEM_NORMAL)
        self.settingsMenu.AppendItem(self.servicesSettingsMenu)
        self.mainMenuBar.Append(self.settingsMenu, "Settings")
        self.helpMenu = wx.Menu()
        self.helpAboutArcGuiMenu = wx.MenuItem(self.helpMenu, wx.NewId(), "&About ArcGUI...\tF1", "", wx.ITEM_NORMAL)
        self.helpMenu.AppendItem(self.helpAboutArcGuiMenu)
        self.mainMenuBar.Append(self.helpMenu, "&Help")
        self.SetMenuBar(self.mainMenuBar)
        # Menu Bar end
        self.checkJobDescription = wx.Button(self.genericJobPane, -1, "&Check")
        self.submitGenericButton = wx.Button(self.genericJobPane, -1, "&Submit")
        self.saveGenericJobButton = wx.Button(self.genericJobPane, -1, "&Save")
        self.openGenericJobButton = wx.Button(self.genericJobPane, -1, "&Open")
        self.clearGenericJobButton = wx.Button(self.genericJobPane, -1, "&Clear")
        self.jobDescriptionText = wx.TextCtrl(self.genericJobPane, -1, "&(executable=\"/bin/echo\")\n(arguments=\"hello\")\n(stdout=\"stdout.txt\")\n(stderr=\"stderr.txt\")\n(gmlog=\"gmlog\")\n(cpuTime=\"8\")", style=wx.TE_MULTILINE|wx.HSCROLL|wx.TE_RICH2)
        self.submitButton = wx.Button(self.simpleJobPane, -1, "&Submit")
        self.saveJobButton = wx.Button(self.simpleJobPane, -1, "&Save")
        self.openJobButton = wx.Button(self.simpleJobPane, -1, "&Open")
        self.clearJobButton = wx.Button(self.simpleJobPane, -1, "&Clear")
        self.label_1 = wx.StaticText(self.simpleJobPane, -1, "Job name")
        self.jobNameText = wx.TextCtrl(self.simpleJobPane, -1, "")
        self.label_2 = wx.StaticText(self.simpleJobPane, -1, "Job script")
        self.jobScriptText = wx.TextCtrl(self.simpleJobPane, -1, "", style=wx.TE_MULTILINE|wx.HSCROLL)
        self.label_3 = wx.StaticText(self.simpleJobPane, -1, "Walltime")
        self.jobWallTimeText = wx.TextCtrl(self.simpleJobPane, -1, "")
        self.label_4 = wx.StaticText(self.simpleJobPane, -1, "Input files")
        self.inputFileList = wx.ListBox(self.simpleJobPane, -1, choices=[])
        self.addInputButton = wx.Button(self.simpleJobPane, -1, "Add")
        self.removeInputButton = wx.Button(self.simpleJobPane, -1, "Remove")
        self.clearInputButton = wx.Button(self.simpleJobPane, -1, "&Clear")
        self.label_4_copy = wx.StaticText(self.simpleJobPane, -1, "Output files")
        self.outputFileList = wx.ListBox(self.simpleJobPane, -1, choices=[])
        self.addOutputButton = wx.Button(self.simpleJobPane, -1, "Add")
        self.removeOutputButton = wx.Button(self.simpleJobPane, -1, "Remove")
        self.clearOutputButton = wx.Button(self.simpleJobPane, -1, "&Clear")
        self.refreshButton = wx.Button(self.activeJobsPane, -1, "Refresh")
        self.retrieveButton = wx.Button(self.activeJobsPane, -1, "&Retrieve")
        self.killButton = wx.Button(self.activeJobsPane, -1, "&Delete")
        self.cleanButton = wx.Button(self.activeJobsPane, -1, "&Clean")
        self.forceDeleteButton = wx.Button(self.activeJobsPane, -1, "Delete from Job List")
        self.jobGrid = wx.grid.Grid(self.activeJobsPane, -1, size=(1, 1))
        self.logOutputLabel = wx.StaticText(self.panel_1, -1, "Output")
        self.logOutputText = wx.TextCtrl(self.panel_1, -1, "", style=wx.TE_MULTILINE|wx.HSCROLL|wx.TE_RICH2)
        self.statusText = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.statusGauge = wx.Gauge(self, -1, 100)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.onFileExit, self.fileExitMenu)
        self.Bind(wx.EVT_MENU, self.onCertProxyInfo, self.sessionCertProxyInfoMenu)
        self.Bind(wx.EVT_MENU, self.onClientSettings, self.clientSettingsMenu)
        self.Bind(wx.EVT_MENU, self.onServicesSettings, self.servicesSettingsMenu)
        self.Bind(wx.EVT_MENU, self.onAbout, self.helpAboutArcGuiMenu)
        self.Bind(wx.EVT_BUTTON, self.onCheckJobDescription, self.checkJobDescription)
        self.Bind(wx.EVT_BUTTON, self.onGenericSubmit, self.submitGenericButton)
        self.Bind(wx.EVT_BUTTON, self.onSubmit, self.submitButton)
        self.Bind(wx.EVT_BUTTON, self.onAddInputFile, self.addInputButton)
        self.Bind(wx.EVT_BUTTON, self.onRemoveInputFile, self.removeInputButton)
        self.Bind(wx.EVT_BUTTON, self.onClearInputFiles, self.clearInputButton)
        self.Bind(wx.EVT_BUTTON, self.onAddOutputFile, self.addOutputButton)
        self.Bind(wx.EVT_BUTTON, self.onRemoveOutputFile, self.removeOutputButton)
        self.Bind(wx.EVT_BUTTON, self.onClearOutputFiles, self.clearOutputButton)
        self.Bind(wx.EVT_BUTTON, self.onFind, self.refreshButton)
        self.Bind(wx.EVT_BUTTON, self.onRetrieve, self.retrieveButton)
        self.Bind(wx.EVT_BUTTON, self.onKill, self.killButton)
        self.Bind(wx.EVT_BUTTON, self.onClean, self.cleanButton)
        self.Bind(wx.EVT_BUTTON, self.onDeleteJobList, self.forceDeleteButton)
        self.Bind(wx.grid.EVT_GRID_CMD_LABEL_LEFT_CLICK, self.onSelectLabel, self.jobGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_SELECT_CELL, self.onSelectCell, self.jobGrid)
        self.Bind(wx.grid.EVT_GRID_CMD_RANGE_SELECT, self.onSelectRange, self.jobGrid)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ArcWindow.__set_properties
        self.SetTitle("ArcGui")
        self.SetSize((700, 672))
        self.jobDescriptionText.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_1.SetMinSize((100, -1))
        self.jobNameText.SetMinSize((-1, 27))
        self.label_2.SetMinSize((100, -1))
        self.label_3.SetMinSize((100, -1))
        self.jobWallTimeText.SetMinSize((-1, 27))
        self.label_4.SetMinSize((100, -1))
        self.addInputButton.SetMinSize((85, -1))
        self.removeInputButton.SetMinSize((85, -1))
        self.clearInputButton.SetMinSize((85, -1))
        self.label_4_copy.SetMinSize((100, -1))
        self.outputFileList.SetMinSize((200, -1))
        self.addOutputButton.SetMinSize((85, -1))
        self.removeOutputButton.SetMinSize((85, -1))
        self.clearOutputButton.SetMinSize((85, -1))
        self.simpleJobPane.Hide()
        self.jobGrid.CreateGrid(10, 3)
        self.jobGrid.EnableEditing(0)
        self.jobGrid.SetSelectionMode(wx.grid.Grid.wxGridSelectRows)
        self.logOutputText.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ArcWindow.__do_layout
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        sizer_14_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1_copy = wx.BoxSizer(wx.VERTICAL)
        panelSizer = wx.BoxSizer(wx.VERTICAL)
        jobPaneVSizer = wx.BoxSizer(wx.VERTICAL)
        jobPaneHSizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_7_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_5_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9_copy.Add(self.checkJobDescription, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_9_copy.Add(self.submitGenericButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_9_copy.Add(self.saveGenericJobButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_9_copy.Add(self.openGenericJobButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_9_copy.Add(self.clearGenericJobButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_3_copy.Add(sizer_9_copy, 0, 0, 0)
        sizer_5_copy.Add(self.jobDescriptionText, 1, wx.ALL|wx.EXPAND, 3)
        sizer_3_copy.Add(sizer_5_copy, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 5)
        self.genericJobPane.SetSizer(sizer_3_copy)
        sizer_9.Add(self.submitButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_9.Add(self.saveJobButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_9.Add(self.openJobButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_9.Add(self.clearJobButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_3.Add(sizer_9, 0, 0, 0)
        sizer_4.Add(self.label_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        sizer_4.Add(self.jobNameText, 1, wx.ALL, 3)
        sizer_3.Add(sizer_4, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 5)
        sizer_5.Add(self.label_2, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_5.Add(self.jobScriptText, 1, wx.ALL|wx.EXPAND, 3)
        sizer_3.Add(sizer_5, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 5)
        sizer_6.Add(self.label_3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        sizer_6.Add(self.jobWallTimeText, 1, wx.ALL|wx.FIXED_MINSIZE, 3)
        sizer_3.Add(sizer_6, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 5)
        sizer_7.Add(self.label_4, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_7.Add(self.inputFileList, 1, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(self.addInputButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_8.Add(self.removeInputButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_8.Add(self.clearInputButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_7.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_7, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 5)
        sizer_7_copy.Add(self.label_4_copy, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_7_copy.Add(self.outputFileList, 1, wx.ALL|wx.EXPAND, 3)
        sizer_8_copy.Add(self.addOutputButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_8_copy.Add(self.removeOutputButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_8_copy.Add(self.clearOutputButton, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_7_copy.Add(sizer_8_copy, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_7_copy, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 5)
        self.simpleJobPane.SetSizer(sizer_3)
        jobPaneHSizer.Add(self.refreshButton, 0, 0, 0)
        jobPaneHSizer.Add(self.retrieveButton, 0, wx.ADJUST_MINSIZE, 0)
        jobPaneHSizer.Add(self.killButton, 0, wx.ADJUST_MINSIZE, 0)
        jobPaneHSizer.Add(self.cleanButton, 0, wx.ADJUST_MINSIZE, 0)
        jobPaneHSizer.Add(self.forceDeleteButton, 0, wx.ADJUST_MINSIZE, 0)
        jobPaneVSizer.Add(jobPaneHSizer, 0, wx.ALL|wx.EXPAND, 4)
        jobPaneVSizer.Add(self.jobGrid, 1, wx.EXPAND, 0)
        self.activeJobsPane.SetSizer(jobPaneVSizer)
        self.noteBook.AddPage(self.genericJobPane, "Generic Job")
        self.noteBook.AddPage(self.simpleJobPane, "Simple Job")
        self.noteBook.AddPage(self.activeJobsPane, "Active Jobs")
        panelSizer.Add(self.noteBook, 3, wx.ALL|wx.EXPAND, 5)
        self.mainPanel.SetSizer(panelSizer)
        sizer_1_copy.Add(self.logOutputLabel, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ADJUST_MINSIZE, 5)
        sizer_1_copy.Add(self.logOutputText, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 5)
        self.panel_1.SetSizer(sizer_1_copy)
        self.window_1.SplitHorizontally(self.mainPanel, self.panel_1, 500)
        mainSizer.Add(self.window_1, 1, wx.EXPAND, 0)
        sizer_14_copy.Add(self.statusText, 1, wx.ALL|wx.EXPAND, 1)
        sizer_14_copy.Add(self.statusGauge, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 2)
        mainSizer.Add(sizer_14_copy, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 4)
        self.SetSizer(mainSizer)
        self.Layout()
        self.Centre()
        # end wxGlade
        
        # Call custom intialisation routine
        
        self.__initApp()
        
    def checkSetup(self):
        
        # Check for arc configuration directory
        
        if not os.path.exists(os.path.expanduser("~/.arc")):
            os.mkdir(os.path.expanduser("~/.arc"))
    
        # Check for client configuration file
        
        jobListFilename = os.path.expanduser("~/.arc/jobs.xml")
        userConfigFilename = os.path.expanduser("~/.arc/client.xml")
        
        # Setup user configuration. If no configuration found it will
        # be created when the file is saved with SaveToFile
        
        userConfig = arc.UserConfig(userConfigFilename, jobListFilename, True)
        userConfig.ConfTree().SaveToFile(userConfigFilename)

        userConfig = arc.UserConfig(userConfigFilename, jobListFilename, True)
        userConfig.ConfTree().SaveToFile(userConfigFilename)
        
        homeDir = os.environ["HOME"]
        uid = os.getuid()
        
        userCertFilename = os.path.join(homeDir, ".globus/usercert.pem")
        userKeyFilename = os.path.join(homeDir, ".globus/userkey.pem")
        proxyFilename = "/tmp/x509up_u%d" % uid
                       
        usingEnvVariables = False

        if os.environ.has_key("X509_USER_CERT"):
            userCertFilename = os.environ["X509_USER_CERT"]
            usingEnvVariables = True
        else:
            usingEnvVariables = False
            

        if os.environ.has_key("X509_USER_KEY"):
            userKeyFilename = os.environ["X509_USER_KEY"]
            usingEnvVariables = True
        else:
            usingEnvVariables = False
            
        if os.environ.has_key("X509_USER_PROXY"):
            proxyFilename = os.environ["X509_USER_PROXY"]
            usingEnvVariables = True
        else:
            usingEnvVariables = False
        
        if not os.path.exists(userCertFilename):
            wx.MessageBox("No user certificate not found.")
            return False
        
        if not os.path.exists(userKeyFilename):
            wx.MessageBox("No user key found.")
            return False
        
        if not os.path.exists(proxyFilename):
            wx.MessageBox("No proxy file found.")
            return False
        
        if not usingEnvVariables:
                       
            if userConfig.ConfTree().Get("CACertificatePath")=="":
                userConfig.ConfTree().NewChild("CACertificatePath").Set("/etc/grid-certificates")
                
            if userConfig.ConfTree().Get("CertificatePath")=="":
                userConfig.ConfTree().NewChild("CertificatePath").Set(userCertFilename)
                
            if userConfig.ConfTree().Get("KeyPath")=="":
                userConfig.ConfTree().NewChild("KeyPath").Set(userKeyFilename)
                
            if userConfig.ConfTree().Get("ProxyPath")=="":
                userConfig.ConfTree().NewChild("ProxyPath").Set(proxyFilename)
                
            userConfig.ConfTree().SaveToFile(userConfigFilename)
        
        return True
        
        
    def __initApp(self):
        """
        Application initialisation
        """
        
        # Show splash window
        
        arcSplash = ArcSplash(self)
        arcSplash.Show(True)
        
        # Setup instance variables
        
        self.__progressDialog = None
        self.__currentSelection = []
        self.__sortKey = ""
        self.__outputLine = ""
        
        # Check setup
        
        if not self.checkSetup():
            self.Destroy()
               
        # Create an ArcClient instance
        
        self.__arcClient = ArcClient(logStream=self)
        self.__arcClient.downloadDir = os.path.abspath(".")        
        
        self.__certInfoOpen = False
        
        # Initialise job page
        
        self.jobNameText.SetValue("Simple job")
        self.jobWallTimeText.SetValue("5")
        
        # Initialise timer for progress update
        
        self.__timerID = 100  # pick a number
        self.__progressTimer = wx.Timer(self, self.__timerID)  # message will be sent to the panel
        wx.EVT_TIMER(self, self.__timerID, self.onProgressTimer)
        
        # Events for non-blocking arc handling
        
        self.Bind(EVT_UPDATE_STATUS_DONE, self.onUpdateStatusDone)
        self.Bind(EVT_RETRIEVE_JOBS_DONE, self.onRetrieveJobsDone)
        self.Bind(EVT_CLEAN_JOBS_DONE, self.onCleanJobsDone)
        self.Bind(EVT_KILL_JOBS_DONE, self.onKillJobsDone)
        self.Bind(EVT_PROGRESS_UPDATE, self.onProgressUpdate)
        self.Bind(EVT_LOG_UPDATE, self.onLogUpdate)
        self.Bind(EVT_SUBMIT_JOB_DONE, self.onSubmitJobDone)
        self.Bind(EVT_CERTINFO_CLOSE, self.onCertInfoClose)
        self.Bind(wx.EVT_CLOSE, self.onWindowClose)
        
        # Initialise grid
        
        self.__clearGrid()
        self.__updateGrid()
            
    def write(self, string):
        evt = UpdateLogEvent(EVT_LOG_UPDATE_TYPE, -1, string)
        wx.PostEvent(self, evt)
        
    def __clearGrid(self):
        """
        Clear contents of grid.
        """
        self.jobGrid.DeleteRows(0,self.jobGrid.GetNumberRows())
        self.jobGrid.DeleteCols(0,self.jobGrid.GetNumberCols())
        self.jobGrid.AutoSizeColumns(True)
        
    def __updateGrid(self):
        """
        Update grid with job information.
        """
        self.__clearGrid()
        self.jobGrid.SetColLabelValue(0,"JobID")
        self.jobGrid.SetColLabelValue(1,"Name")
        self.jobGrid.SetColLabelValue(2,"State")
        self.jobGrid.SetColLabelValue(3,"ExitCode")
        
        self.jobGrid.DeleteCols(0,self.jobGrid.GetNumberCols())
        self.jobGrid.AppendCols(4)
        self.jobGrid.SetRowLabelSize(30)
        self.jobGrid.SetColLabelSize(20)
        row = 0
                
        sortedKeys = self.__arcClient.sortKeysBy(self.__sortKey)
              
        for jobId in sortedKeys:
            self.jobGrid.AppendRows(1)
            self.jobGrid.SetCellValue(row,0,jobId)
            try:
                self.jobGrid.SetCellValue(row,1,self.__arcClient.jobDict[jobId]["Name"])
                self.jobGrid.SetCellValue(row,2,self.__arcClient.jobDict[jobId]["State"])
                self.jobGrid.SetCellValue(row,3,str(self.__arcClient.jobDict[jobId]["ExitCode"]))
            except:
                pass
            self.jobGrid.AutoSizeRows(row)
            row+=1

        self.jobGrid.AutoSizeColumns(True)
        
    def __updateStatus(self):
        """
        Update status for grid jobs.
        """
        worker = UpdateStatusThread(self, self.__arcClient)
        worker.start()
        self.__progressTimer.Start(100)
                    
    def onFind(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Event handler: updating job status.
        """
        self.__updateStatus()
        
    def onRetrieve(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Event handler: Retrieve selected jobs.
        """
        
        if len(self.__currentSelection)>0:
            
            downLoadDir = os.getcwd()
            
            dlg = wx.DirDialog(self, "Choose a download directory", os.getcwd())
            if dlg.ShowModal() == wx.ID_OK:
                downloadDir = dlg.GetPath()
            else:
                return

            jobIds = []
            for selection in self.__currentSelection:
                jobIds.append(str(self.jobGrid.GetCellValue(selection,0)))
                
            worker = RertieveJobsThread(self, self.__arcClient, jobIds, downloadDir)
            worker.start()
            self.__progressTimer.Start(100)

    def onKill(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Event handler: Kill selected jobs.
        """
        if len(self.__currentSelection)>0:
            jobIds = []
            for selection in self.__currentSelection:
                jobIds.append(str(self.jobGrid.GetCellValue(selection,0)))
                
            worker = KillJobsThread(self, self.__arcClient, jobIds)
            worker.start()
            self.__progressTimer.Start(100)

    def onClean(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Event handler: Clean selected jobs.
        """
        if len(self.__currentSelection)>0:
            jobIds = []
            for selection in self.__currentSelection:
                jobIds.append(str(self.jobGrid.GetCellValue(selection,0)))
                
            worker = CleanJobsThread(self, self.__arcClient, jobIds)
            worker.start()
            self.__progressTimer.Start(100)
                
    def onSubmit(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Event handler: Submit a job.
        """
        
        # Create job description
        
        self.job = ManagedJobDescription();
        
        self.job.JobName = str(self.jobNameText.GetValue())
        self.job.TotalWallTime = arc.Period(str(self.jobWallTimeText.GetValue()),arc.PeriodMinutes)
        self.job.Executable = "/bin/sh"
        self.job.addArgument("run.sh")
        self.job.addInputFile("run.sh")
        self.job.Output = "stdout.txt"
        self.job.Error = "stderr.txt"
        self.job.TotalWallTime = arc.Period("5",arc.PeriodMinutes)
        
        # Create run-script
        
        jobScriptFile = open("run.sh", "w")
        jobScriptFile.write(self.jobScriptText.GetValue())
        jobScriptFile.close()
        
        # Start job submission thread
                
        worker = SubmitJobThread(self, self.__arcClient, self.job)
        worker.start()
        self.__progressTimer.Start(100)
        
    def onGenericSubmit(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Event handler: Submit a job.
        """
        
        # Create job description
        
        jobDescription = str(self.jobDescriptionText.GetValue())
        
        job = ManagedJobDescription();
        if not job.Parse(jobDescription):
            wxMessageBox("Failed to parse job description.")
                
        # Start job submission thread
        
        worker = SubmitJobThread(self, self.__arcClient, job)
        worker.start()
        self.__progressTimer.Start(100)
        
    def onDeleteJobList(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Event handler: Clean selected jobs.
        """
        if len(self.__currentSelection)>0:
            jobIds = []
            for selection in self.__currentSelection:
                jobIds.append(str(self.jobGrid.GetCellValue(selection,0)))
                
            worker = CleanJobsThread(self, self.__arcClient, jobIds, force=True)
            worker.start()
            self.__progressTimer.Start(100)

    def onCheckJobDescription(self, event): # wxGlade: ArcWindow.<event_handler>
        # Create job description
        
        jobDescription = str(self.jobDescriptionText.GetValue())
        
        job = ManagedJobDescription();
        if not job.Parse(jobDescription):
            wx.MessageBox("Failed to parse job description.")
        else:
            wx.MessageBox("Job description ok.")
        
    def onSelectCell(self, event): # wxGlade: ArcWindow.<event_handler>
        """Event handler: Internal update to the selection tracking list"""
        
        self.currentSelection = [ event.GetRow() ]
        event.Skip()

    def onSelectRange(self, event): # wxGlade: ArcWindow.<event_handler>
        """Event handler: Handle a range selection."""
        if event.Selecting():
                # adding to the list...
                for index in range( event.GetTopRow(), event.GetBottomRow()+1):
                        if index not in self.__currentSelection:
                                self.__currentSelection.append( index )
        else:
                # removal from list
                for index in range( event.GetTopRow(), event.GetBottomRow()+1):
                        while index in self.__currentSelection:
                                self.__currentSelection.remove( index )
        event.Skip()

    def onSelectLabel(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Event handler: Handle sorting by column when a label i selected.
        """
        if event.GetRow()==-1:
            
            if event.GetCol() == 0:
                self.__sortKey = ""
            elif event.GetCol() == 1:
                self.__sortKey = "Name"
            elif event.GetCol() == 2:
                self.__sortKey = "State"
            elif event.GetCol() == 3:
                self.__sortKey = "ExitCode"
                
            self.__updateGrid()
        else:
            event.Skip()

    def onDlSelectLabel(self, event): # wxGlade: ArcWindow.<event_handler>
        print "Event handler `onDlSelectLabel' not implemented"

    def onDlSelectCell(self, event): # wxGlade: ArcWindow.<event_handler>
        print "Event handler `onDlSelectCell' not implemented"

    def onDlSelectRange(self, event): # wxGlade: ArcWindow.<event_handler>
        print "Event handler `onDlSelectRange' not implemented"

    def onAddInputFile(self, event): # wxGlade: ArcWindow.<event_handler>
        inputFilename = wx.FileSelector(default_path=os.getcwd())
        if inputFilename != "":
            self.inputFileList.Append(inputFilename)

    def onRemoveInputFile(self, event): # wxGlade: ArcWindow.<event_handler>
        if self.inputFileList.GetSelection()!=-1:
            self.inputFileList.Delete(self.inputFileList.GetSelection())

    def onClearInputFiles(self, event): # wxGlade: ArcWindow.<event_handler>
        self.inputFileList.Clear()

    def onAddOutputFile(self, event): # wxGlade: ArcWindow.<event_handler>
        dialog = AddOutputFileDialog(self)
        if dialog.ShowModal()==wx.ID_OK:
            if dialog.outputFilename!="":
                self.outputFileList.Append(dialog.outputFilename)
        dialog.Destroy()

    def onRemoveOutputFile(self, event): # wxGlade: ArcWindow.<event_handler>
        if self.outputFileList.GetSelection()!=-1:
            self.outputFileList.Delete(self.FileList.GetSelection())

    def onClearOutputFiles(self, event): # wxGlade: ArcWindow.<event_handler>
        self.outputFileList.Clear()
        
    def onFileExit(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Close ArcGUI application
        """
        self.Close()

    def onCertProxyInfo(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Show certificate information window.
        """
        if not self.__certInfoOpen:
            window = CertificateInfoWindow(self)
            window.userConfig = self.__arcClient.userConfig
            window.Show(True)
            self.__certInfoOpen = True

    def onClientSettings(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Show client settings dialog
        """
        dialog = ClientSettingsDialog(self)
        dialog.userConfig = self.__arcClient.userConfig
        if dialog.ShowModal()==wx.ID_OK:
            self.__arcClient.userConfig.SetTimeOut(dialog.timeOut)
            self.__arcClient.userConfig.SetBroker(dialog.broker)
        dialog.Destroy()

    def onServicesSettings(self, event): # wxGlade: ArcWindow.<event_handler>
        """
        Show default services dialog
        """
        dialog = DefaultServicesDialog(self)
        dialog.userConfig = self.__arcClient.userConfig
        if dialog.ShowModal()==wx.ID_OK:
            
            # Create a new "DefaultServices" XMLNode.
            
            newServices = arc.XMLNode(arc.NS(), "DefaultServices")
            
            # Add services from dialog string list
            
            services = self.__arcClient.userConfig.ConfTree().Get("DefaultServices")
            for service in dialog.serviceList:
                urlTag = newServices.NewChild("URL")
                urlTag.NewAttribute("Flavour").Set("ARC0")
                urlTag.NewAttribute("ServiceType").Set("index")    
                urlTag.Set(str(service))
                
            # Replace old services node with new one.
            
            self.__arcClient.userConfig.ConfTree().Get("DefaultServices").Replace(newServices)

        dialog.Destroy()
        
    def onCertInfoClose(self, event):
        """
        Handle close notification event from certificate info window.
        """
        self.__certInfoOpen = False
        
    def onWindowClose(self, event):
        """
        Event method handling window close. Ask user if configuration
        should be saved.
        """
        if wx.MessageBox("Save configuration?", "ArcGui", style=wx.YES_NO)==wx.YES:
            self.__arcClient.saveConfiguration()
        
        self.Destroy()

    def onProgressTimer(self, event):
        """
        Event method handling timer event for updating
        statusGauge when a working thread is active.
        """
        self.statusGauge.Pulse()
        wx.Yield()
        
    def onUpdateStatusDone(self, event):
        """
        Event method called when job status query is finished.
        """        
        self.__progressTimer.Stop()
        self.statusGauge.SetValue(0)
        self.statusText.SetValue("")
        self.__updateGrid()
        
    def onRetrieveJobsDone(self, event):
        """
        Event method called when all jobs have been downloaded.
        """        
        self.__progressTimer.Stop()
        self.statusGauge.SetValue(0)
        self.statusText.SetValue("")
        self.__updateStatus()
        
    def onCleanJobsDone(self, event):
        """
        Event method called when all jobs have been cleaned.
        """        
        self.__progressTimer.Stop()
        self.statusGauge.SetValue(0)
        self.statusText.SetValue("")
        self.__updateStatus()

    def onKillJobsDone(self, event):
        """
        Event method called when all jobs have been killed.
        """        
        self.__progressTimer.Stop()
        self.statusGauge.SetValue(0)
        self.statusText.SetValue("")
        self.__updateStatus()
        
    def onSubmitJobDone(self, event):
        """
        Event method called when job submit is finished.
        """
        self.__progressTimer.Stop()
        self.statusGauge.SetValue(0)
        self.statusText.SetValue("")
        if event.success:
            self.__updateStatus()
            wx.MessageBox("Job submitted succesfully.", "ArcGui")
        else:
            wx.MessageBox("Failed to submit job.", "ArcClient")
        
    def onProgressUpdate(self, event):
        """
        Event method for handling status messages.
        """
        self.statusText.SetValue(event.info)
        
    def onLogUpdate(self, event):
        """
        Event method for handling status messages.
        """
        
        # Make sure to collect logs into hole lines
        
        outputLine = ""
        warningLine = ""
        errorLine = ""
        
        if event.output.find("\n")!=-1:
            self.__outputLine += event.output.split("\n")[0]
            outputLine = self.__outputLine
            self.__outputLine = ""
        else:
            self.__outputLine += event.output
            
        if outputLine!="":
            if outputLine.find("INFO")!=-1:
                self.logOutputText.GetDefaultStyle().SetTextColour("blue")
            elif outputLine.find("ERROR")!=-1:
                self.logOutputText.GetDefaultStyle().SetTextColour("red")
                errorLine = outputLine
            elif outputLine.find("WARNING")!=-1:
                self.logOutputText.GetDefaultStyle().SetTextColour("darkyellow")
                warningLine = warningLine
            elif outputLine.find("DEBUG")!=-1:
                self.logOutputText.GetDefaultStyle().SetTextColour("darkgreen")
                
            self.logOutputText.AppendText(str(outputLine+"\n"))
                        
    def onAbout(self, event): # wxGlade: ArcWindow.<event_handler>
        arcSplash = ArcSplash(self)
        arcSplash.Show(True)

# end of class ArcWindow
